# Enhanced Nginx configuration for Radiate Voice Service with Redis integration
# Production configuration for 5.35.83.143

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Events context
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

# HTTP context
http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Enhanced logging with timing info
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 4096;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Enhanced rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=voice:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # WebSocket upgrade mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    # Upstream definitions with enhanced health checking
    upstream auth_service {
        server 127.0.0.1:14701 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream telegram_bot_service {
        server 127.0.0.1:14702 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    upstream voice_service {
        server 127.0.0.1:14705 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream livekit_server {
        server 127.0.0.1:7880 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    # Main server block
    server {
        listen 80;
        listen 443 ssl http2;
        server_name 5.35.83.143 radiate.local;
        
        # SSL configuration (uncomment when you have certificates)
        # ssl_certificate /etc/letsencrypt/live/5.35.83.143/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/5.35.83.143/privkey.pem;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        # ssl_prefer_server_ciphers off;
        
        # Enhanced security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        
        # CORS configuration for desktop app
        set $cors_origin "*";
        if ($http_origin ~* (tauri://localhost|http://localhost:5173|https://radiate.local)) {
            set $cors_origin $http_origin;
        }
        
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Session-ID' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,X-Session-ID' always;
        add_header 'Access-Control-Max-Age' '86400' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        # Connection limits
        limit_conn perip 50;
        limit_conn perserver 1000;
        
        # Root and index
        root /var/www/html;
        index index.html index.htm;
        
        # ============ HEALTH AND MONITORING ============
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /api/health {
            access_log off;
            proxy_pass http://voice_service/health;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # ============ AUTH SERVICE ============
        location /api/auth/ {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://auth_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # ============ TELEGRAM BOT SERVICE ============
        location /api/telegram/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://telegram_bot_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # ============ VOICE SERVICE API ============
        location /api/voice/ {
            limit_req zone=voice burst=50 nodelay;
            
            proxy_pass http://voice_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings for real-time communication
            proxy_buffering off;
            proxy_request_buffering off;
        }
        
        # ============ VOICE WEBSOCKET ============
        location /ws/voice {
            limit_req zone=websocket burst=10 nodelay;
            
            proxy_pass http://voice_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific settings
            proxy_buffering off;
            proxy_read_timeout 24h;
            proxy_send_timeout 24h;
            proxy_connect_timeout 10s;
            
            # WebSocket keep-alive
            proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
            proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
        }
        
        # ============ LIVEKIT SERVER (WebRTC signaling) ============
        location /livekit/ {
            proxy_pass http://livekit_server/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebRTC specific settings
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_read_timeout 24h;
            proxy_send_timeout 24h;
            proxy_connect_timeout 10s;
        }
        
        # ============ LIVEKIT WEBHOOKS ============
        location /webhook/livekit {
            proxy_pass http://voice_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Preserve webhook headers
            proxy_pass_request_headers on;
            proxy_set_header Authorization $http_authorization;
        }
        
        # ============ METRICS ENDPOINTS ============
        location /metrics {
            # Restrict access in production
            allow 127.0.0.1;
            allow 5.35.83.143;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            # Route to appropriate service based on path
            location /metrics/voice {
                proxy_pass http://voice_service/metrics;
            }
            
            location /metrics/auth {
                proxy_pass http://auth_service/metrics;
            }
            
            location /metrics/telegram {
                proxy_pass http://telegram_bot_service/metrics;
            }
            
            # Default metrics endpoint
            proxy_pass http://voice_service/metrics;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # ============ ICE/TURN SERVERS ============
        location /api/voice/ice-servers {
            proxy_pass http://voice_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # ============ STATIC FILES ============
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            access_log off;
        }
        
        # ============ DESKTOP APP UPDATES ============
        location /updates/ {
            alias /var/www/radiate/updates/;
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            autoindex on;
        }
        
        # ============ DEFAULT LOCATION ============
        location / {
            try_files $uri $uri/ @fallback;
        }
        
        location @fallback {
            return 404 "Not Found";
        }
        
        # ============ ERROR PAGES ============
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # ============ STATUS AND MONITORING SERVER ============
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status;
            allow 127.0.0.1;
            deny all;
        }
        
        location /health_detailed {
            access_log off;
            return 200 '{"status":"ok","timestamp":"$time_iso8601","server":"nginx"}';
            add_header Content-Type application/json;
        }
    }
}

# ============ STREAM CONTEXT FOR UDP TRAFFIC ============
stream {
    # Logging for stream
    error_log /var/log/nginx/stream_error.log;
    access_log /var/log/nginx/stream_access.log;
    
    # WebRTC media traffic (UDP)
    upstream livekit_webrtc {
        server 127.0.0.1:7881;
        server 127.0.0.1:7882;
        server 127.0.0.1:7883;
        server 127.0.0.1:7884;
        server 127.0.0.1:7885;
    }
    
    # WebRTC UDP proxy
    server {
        listen 7881-7885 udp;
        proxy_pass livekit_webrtc;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_bind $remote_addr transparent;
        error_log /var/log/nginx/webrtc_error.log;
    }
    
    # TURN server traffic (UDP)
    upstream turn_server {
        server 127.0.0.1:3478;
    }
    
    server {
        listen 3478 udp;
        proxy_pass turn_server;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/turn_udp_error.log;
    }
    
    # TURN server traffic (TCP)
    server {
        listen 3478;
        proxy_pass turn_server;
        proxy_timeout 600s;
        proxy_connect_timeout 10s;
        error_log /var/log/nginx/turn_tcp_error.log;
    }
    
    # TURN over TLS (for corporate firewalls)
    server {
        listen 443 udp;
        proxy_pass 127.0.0.1:5349;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/turn_tls_error.log;
    }
}