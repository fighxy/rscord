use std::{collections::HashMap, sync::Arc};
use teloxide::{prelude::*, utils::command::BotCommands};
use tokio::sync::RwLock;
use tracing::info;

const BOT_TOKEN: &str = "8485874967:AAHyf9abWYBwbTrlHFcY9RaP25IvRg8jbk8";

#[derive(Clone)]
pub struct AppState {
    pub auth_codes: Arc<RwLock<HashMap<String, AuthCode>>>,
    pub user_sessions: Arc<RwLock<HashMap<i64, UserSession>>>,
}

#[derive(Debug, Clone)]
pub struct AuthCode {
    pub code: String,
    pub telegram_id: i64,
    pub username: String,
    pub created_at: std::time::SystemTime,
}

#[derive(Debug, Clone)]
pub struct UserSession {
    pub telegram_id: i64,
    pub username: Option<String>,
    pub state: SessionState,
}

#[derive(Debug, Clone)]
pub enum SessionState {
    Start,
    WaitingForUsername,
    Registered(String),
}

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase")]
enum Command {
    #[command(description = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Radiate")]
    Start,
    #[command(description = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
    Register,
    #[command(description = "–í—Ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
    Login,
    #[command(description = "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")]
    GetCode,
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")]
    Help,
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
fn generate_six_digit_code() -> String {
    use rand::Rng;
    let mut rng = rand::thread_rng();
    format!("{:06}", rng.gen_range(100000..999999))
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ username —á–µ—Ä–µ–∑ auth-service
async fn check_username_availability(username: &str) -> Result<bool, reqwest::Error> {
    let client = reqwest::Client::new();
    let response = client
        .post("http://localhost:14701/api/auth/check-username")
        .json(&serde_json::json!({"username": username}))
        .send()
        .await?;
    
    let result: serde_json::Value = response.json().await?;
    Ok(result["available"].as_bool().unwrap_or(false))
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ auth-service
async fn register_user_via_auth(telegram_id: i64, telegram_username: Option<String>, username: &str) -> Result<bool, reqwest::Error> {
    let client = reqwest::Client::new();
    let response = client
        .post("http://localhost:14701/api/auth/telegram/register")
        .json(&serde_json::json!({
            "telegram_id": telegram_id,
            "telegram_username": telegram_username,
            "username": username,
            "display_name": username
        }))
        .send()
        .await?;
    
    Ok(response.status().is_success())
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ auth-service
async fn verify_user_via_auth(telegram_id: i64, username: &str) -> Result<bool, reqwest::Error> {
    let client = reqwest::Client::new();
    let response = client
        .post("http://localhost:14701/api/auth/telegram/login")
        .json(&serde_json::json!({
            "telegram_id": telegram_id,
            "username": username
        }))
        .send()
        .await?;
    
    Ok(response.status().is_success())
}

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt::init();
    
    let bot = Bot::new(BOT_TOKEN);
    
    let state = AppState {
        auth_codes: Arc::new(RwLock::new(HashMap::new())),
        user_sessions: Arc::new(RwLock::new(HashMap::new())),
    };
    
    info!("Starting Radiate Telegram Bot...");
    
    teloxide::repl(bot, move |bot: Bot, msg: Message| {
        let state = state.clone();
        async move {
            let user_id = msg.from().unwrap().id.0 as i64;
            let username = msg.from().unwrap().username.clone();
            
            if let Some(text) = msg.text() {
                let chat_id = msg.chat.id;
                let msg_id = msg.id;
                if let Ok(cmd) = Command::parse(text, "RadiateAuth_bot") {
                    handle_command(bot, chat_id, msg_id, cmd, state, user_id, username).await?;
                } else {
                    handle_text_message(bot, chat_id, msg_id, state, user_id, text).await?;
                }
            }
            Ok(())
        }
    }).await;
}

async fn handle_command(
    bot: Bot, 
    chat_id: ChatId,
    _msg_id: MessageId,
    cmd: Command, 
    state: AppState, 
    user_id: i64,
    username: Option<String>
) -> ResponseResult<()> {
    match cmd {
        Command::Start => {
            bot.send_message(
                chat_id,
                "üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Radiate!**\n\n\
                Radiate - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã. \
                –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, –æ–±—â–∞–π—Ç–µ—Å—å –≥–æ–ª–æ—Å–æ–º –∏ —Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ!\n\n\
                üì± **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**\n\
                /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\
                /login - –í—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç\n\
                /getcode - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n\
                ‚ùì /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
            ).await?;
        }
        
        Command::Register => {
            let mut sessions = state.user_sessions.write().await;
            let session = sessions.entry(user_id).or_insert(UserSession {
                telegram_id: user_id,
                username: username.clone(),
                state: SessionState::Start,
            });
            
            session.state = SessionState::WaitingForUsername;
            
            bot.send_message(
                chat_id,
                "üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n\
                –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π username –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Radiate:\n\
                ‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _\n\
                ‚Ä¢ –û—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n\
                ‚Ä¢ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–∞–∫ @username"
            ).await?;
        }
        
        Command::Login => {
            let sessions = state.user_sessions.read().await;
            if let Some(session) = sessions.get(&user_id) {
                if let SessionState::Registered(ref stored_username) = session.state {
                    match verify_user_via_auth(user_id, stored_username).await {
                        Ok(true) => {
                            bot.send_message(
                                chat_id,
                                format!("‚úÖ **–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n–í–∞—à username: @{}\n\nüîë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcode –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", stored_username)
                            ).await?;
                        }
                        Ok(false) => {
                            bot.send_message(
                                chat_id,
                                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                            ).await?;
                        }
                        Err(_) => {
                            bot.send_message(
                                chat_id,
                                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            ).await?;
                        }
                    }
                } else {
                    bot.send_message(
                        chat_id,
                        "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."
                    ).await?;
                }
            } else {
                bot.send_message(
                    msg.chat.id,
                    "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                ).await?;
            }
        }
        
        Command::GetCode => {
            let sessions = state.user_sessions.read().await;
            if let Some(session) = sessions.get(&user_id) {
                if let SessionState::Registered(ref stored_username) = session.state {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
                    let code = generate_six_digit_code();
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
                    let mut codes = state.auth_codes.write().await;
                    codes.insert(code.clone(), AuthCode {
                        code: code.clone(),
                        telegram_id: user_id,
                        username: stored_username.clone(),
                        created_at: std::time::SystemTime::now(),
                    });
                    
                    bot.send_message(
                        chat_id,
                        format!(
                            "üîë **–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**\n\n\
                            `{}`\n\n\
                            üì± –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Radiate –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç @{}\n\n\
                            ‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.",
                            code, stored_username
                        )
                    ).await?;
                } else {
                    bot.send_message(
                        chat_id,
                        "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."
                    ).await?;
                }
            } else {
                bot.send_message(
                    msg.chat.id,
                    "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
                ).await?;
            }
        }
        
        Command::Help => {
            bot.send_message(
                chat_id,
                "ü§ñ **Radiate Telegram Bot - –°–ø—Ä–∞–≤–∫–∞**\n\n\
                **–ö–æ–º–∞–Ω–¥—ã:**\n\
                /start - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\
                /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\
                /login - –í—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç\n\
                /getcode - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\
                /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n\
                üì± **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n\
                1. –°–Ω–∞—á–∞–ª–∞ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞\n\
                2. –ó–∞—Ç–µ–º /getcode –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞\n\
                3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Radiate"
            ).await?;
        }
    }
    Ok(())
}

async fn handle_text_message(
    bot: Bot,
    chat_id: ChatId,
    _msg_id: MessageId,
    state: AppState,
    user_id: i64,
    text: &str,
) -> ResponseResult<()> {
    let mut sessions = state.user_sessions.write().await;
    
    if let Some(session) = sessions.get_mut(&user_id) {
        match &session.state {
            SessionState::WaitingForUsername => {
                let username = text.trim();
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è username
                if username.is_empty() || username.len() < 3 || username.len() > 32 || 
                   !username.chars().all(|c| c.is_ascii_alphanumeric() || c == '_') {
                    bot.send_message(
                        chat_id,
                        "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π username**\n\n\
                        Username –¥–æ–ª–∂–µ–Ω:\n\
                        ‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _\n\
                        ‚Ä¢ –ë—ã—Ç—å –æ—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n\n\
                        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    ).await?;
                    return Ok(());
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å username
                match check_username_availability(username).await {
                    Ok(true) => {
                        // Username –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        match register_user_via_auth(user_id, session.username.clone(), username).await {
                            Ok(true) => {
                                session.state = SessionState::Registered(username.to_string());
                                bot.send_message(
                                    chat_id,
                                    format!(
                                        "üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n\n\
                                        –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:\n\
                                        üë§ Username: @{}\n\
                                        üÜî Telegram ID: {}\n\n\
                                        üîë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcode –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
                                        username, user_id
                                    )
                                ).await?;
                            }
                            Ok(false) => {
                                bot.send_message(
                                    chat_id,
                                    "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π username."
                                ).await?;
                            }
                            Err(_) => {
                                bot.send_message(
                                    chat_id,
                                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                                ).await?;
                            }
                        }
                    }
                    Ok(false) => {
                        bot.send_message(
                            chat_id,
                            format!("‚ùå Username **@{}** —É–∂–µ –∑–∞–Ω—è—Ç.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π:", username)
                        ).await?;
                    }
                    Err(_) => {
                        bot.send_message(
                            chat_id,
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        ).await?;
                    }
                }
            }
            _ => {
                bot.send_message(
                    msg.chat.id,
                    "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                ).await?;
            }
        }
    } else {
        bot.send_message(
            msg.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        ).await?;
    }
    
    Ok(())
}