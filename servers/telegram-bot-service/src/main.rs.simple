use axum::{extract::{Query, State}, http::StatusCode, response::Json, routing::{get, post}, Router};
use serde::{Deserialize, Serialize};
use std::{collections::HashMap, sync::Arc};
use teloxide::{prelude::*, types::Me, utils::command::BotCommands};
use tokio::sync::RwLock;
use tower_http::cors::{Any, CorsLayer};
use tracing::{info, warn};
use uuid::Uuid;

const BOT_TOKEN: &str = "8485874967:AAHyf9abWYBwbTrlHFcY9RaP25IvRg8jbk8Use";

#[derive(Clone)]
pub struct AppState {
    pub bot: Bot,
    pub bot_username: String,
    pub auth_codes: Arc<RwLock<HashMap<String, String>>>,
    pub user_sessions: Arc<RwLock<HashMap<i64, String>>>,
}

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase")]
enum Command {
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")]
    Help,
    #[command(description = "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤—Ö–æ–¥")]
    Start,
}

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt::init();
    
    let bot = Bot::new(BOT_TOKEN);
    
    info!("Starting simple Telegram bot...");
    
    teloxide::repl(bot, |bot: Bot, msg: Message| async move {
        if let Some(text) = msg.text() {
            if text.starts_with("/start") {
                bot.send_message(
                    msg.chat.id,
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Radiate!\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."
                ).await?;
            } else if text.starts_with("/help") {
                bot.send_message(
                    msg.chat.id,
                    "ü§ñ Radiate Telegram Bot\n\n–ö–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/help - –°–ø—Ä–∞–≤–∫–∞"
                ).await?;
            } else {
                bot.send_message(
                    msg.chat.id,
                    format!("–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", text)
                ).await?;
            }
        }
        Ok(())
    }).await;
}
