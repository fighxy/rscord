name: Security and Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ежедневная проверка безопасности в 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
    
    - name: Check for vulnerable dependencies
      run: |
        cargo install cargo-audit
        cd servers
        cargo audit
    
    - name: SAST - Static Application Security Testing
      uses: securego/gosec@master
      with:
        args: '-fmt json -out gosec-report.json ./...'
      continue-on-error: true
    
    - name: Check for hardcoded Telegram token
      run: |
        if grep -r "8485874967:AAH" . --exclude-dir=.git; then
          echo "::error::CRITICAL: Hardcoded Telegram token found!"
          exit 1
        fi
    
    - name: Check for default JWT secrets
      run: |
        if grep -r "default-jwt-secret" . --exclude-dir=.git --exclude="*.md"; then
          echo "::error::Default JWT secret found in code!"
          exit 1
        fi

  rust-quality:
    name: Rust Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: |
        cd servers
        cargo fmt -- --check
    
    - name: Run clippy
      run: |
        cd servers
        cargo clippy -- -D warnings
    
    - name: Run tests
      run: |
        cd servers
        cargo test --all

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: apps/RadiateDesktop/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/RadiateDesktop
        npm ci
    
    - name: Type checking
      run: |
        cd apps/RadiateDesktop
        npm run type-check || npx tsc --noEmit
    
    - name: Lint
      run: |
        cd apps/RadiateDesktop
        npx eslint . --ext .ts,.tsx || true
    
    - name: Security audit
      run: |
        cd apps/RadiateDesktop
        npm audit --audit-level=critical

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Run integration tests
      env:
        MONGO_URI: mongodb://admin:testpass@localhost:27017/radiate_test?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret_for_ci_only_32_chars_long
      run: |
        cd servers
        cargo test --all -- --test-threads=1

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        # Создаем простой k6 тест
        cat > loadtest.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';
        
        export let options = {
          stages: [
            { duration: '30s', target: 20 },
            { duration: '1m', target: 20 },
            { duration: '30s', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<500'],
          },
        };
        
        export default function() {
          let res = http.get('http://localhost:14701/health');
          check(res, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF
        
        # k6 run loadtest.js || true

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [security-check, rust-quality, frontend-quality, docker-security]
    if: failure()
    steps:
    - name: Send notification
      run: |
        echo "::error::Security or quality checks failed! Check the logs above."
        # Здесь можно добавить отправку в Slack, Discord, email и т.д.
