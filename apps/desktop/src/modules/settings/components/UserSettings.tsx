import { useState, useEffect } from "react";
import { useAuth } from "../../auth/store";
import { updateUserProfile, changePassword } from "../api";

interface UserSettingsForm {
  display_name: string;
  email: string;
  current_password: string;
  new_password: string;
  confirm_password: string;
}

export function UserSettings() {
  const { user, setUser } = useAuth();
  const [form, setForm] = useState<UserSettingsForm>({
    display_name: user?.displayName || '',
    email: user?.email || '',
    current_password: '',
    new_password: '',
    confirm_password: ''
  });
  const [activeTab, setActiveTab] = useState<'profile' | 'security' | 'notifications' | 'privacy'>('profile');
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);

  useEffect(() => {
    if (user) {
      setForm(prev => ({
        ...prev,
        display_name: user.displayName || '',
        email: user.email || ''
      }));
    }
  }, [user]);

  const handleInputChange = (field: keyof UserSettingsForm, value: string) => {
    setForm(prev => ({ ...prev, [field]: value }));
    setMessage(null);
  };

  const handleProfileUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user?.id) return;

    setIsLoading(true);
    setMessage(null);

    try {
      const updatedUser = await updateUserProfile(user.id, {
        display_name: form.display_name,
        email: form.email
      });

      setUser(updatedUser);
      setMessage({ type: 'success', text: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' });
      
      // –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª–∏
      setForm(prev => ({
        ...prev,
        current_password: '',
        new_password: '',
        confirm_password: ''
      }));
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user?.id) return;

    if (form.new_password !== form.confirm_password) {
      setMessage({ type: 'error', text: '–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç' });
      return;
    }

    if (form.new_password.length < 6) {
      setMessage({ type: 'error', text: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
      return;
    }

    setIsLoading(true);
    setMessage(null);

    try {
      await changePassword(user.id, {
        current_password: form.current_password,
        new_password: form.new_password
      });

      setMessage({ type: 'success', text: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!' });
      
      // –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª–∏
      setForm(prev => ({
        ...prev,
        current_password: '',
        new_password: '',
        confirm_password: ''
      }));
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è' });
    } finally {
      setIsLoading(false);
    }
  };

  const tabs = [
    { id: 'profile', label: '–ü—Ä–æ—Ñ–∏–ª—å', icon: 'üë§' },
    { id: 'security', label: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: 'üîí' },
    { id: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: 'üîî' },
    { id: 'privacy', label: '–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', icon: 'üõ°Ô∏è' }
  ] as const;

  if (!user) return null;

  return (
    <div style={{
      maxWidth: '800px',
      margin: '0 auto',
      padding: '24px',
      backgroundColor: 'var(--bg-800)',
      borderRadius: '8px',
      border: '1px solid var(--border)'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{
        marginBottom: '24px',
        textAlign: 'center'
      }}>
        <h1 style={{
          margin: 0,
          color: 'var(--text-100)',
          fontSize: '24px',
          fontWeight: '600'
        }}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        </h1>
        <p style={{
          margin: '8px 0 0 0',
          color: 'var(--text-500)',
          fontSize: '14px'
        }}>
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        </p>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div style={{
          padding: '12px 16px',
          backgroundColor: message.type === 'success' ? 'var(--success)' : 'var(--error-600)',
          color: 'white',
          borderRadius: '6px',
          marginBottom: '16px',
          fontSize: '14px'
        }}>
          {message.text}
        </div>
      )}

      {/* –¢–∞–±—ã */}
      <div style={{
        display: 'flex',
        borderBottom: '1px solid var(--border)',
        marginBottom: '24px'
      }}>
        {tabs.map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            style={{
              background: 'none',
              border: 'none',
              padding: '12px 24px',
              color: activeTab === tab.id ? 'var(--brand)' : 'var(--text-400)',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: activeTab === tab.id ? '600' : '400',
              borderBottom: activeTab === tab.id ? '2px solid var(--brand)' : 'none',
              transition: 'all 0.2s'
            }}
          >
            {tab.icon} {tab.label}
          </button>
        ))}
      </div>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤ */}
      <div>
        {/* –ü—Ä–æ—Ñ–∏–ª—å */}
        {activeTab === 'profile' && (
          <form onSubmit={handleProfileUpdate}>
            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '8px',
                color: 'var(--text-100)',
                fontSize: '14px',
                fontWeight: '600'
              }}>
                –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
              </label>
              <input
                type="text"
                value={form.display_name}
                onChange={(e) => handleInputChange('display_name', e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid var(--border)',
                  borderRadius: '6px',
                  backgroundColor: 'var(--bg-700)',
                  color: 'var(--text-100)',
                  fontSize: '14px'
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"
                required
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '8px',
                color: 'var(--text-100)',
                fontSize: '14px',
                fontWeight: '600'
              }}>
                Email
              </label>
              <input
                type="email"
                value={form.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid var(--border)',
                  borderRadius: '6px',
                  backgroundColor: 'var(--bg-700)',
                  color: 'var(--text-100)',
                  fontSize: '14px'
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                required
              />
            </div>

            <button
              type="submit"
              disabled={isLoading}
              style={{
                padding: '10px 24px',
                backgroundColor: 'var(--brand)',
                border: 'none',
                borderRadius: '6px',
                color: 'white',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600',
                opacity: isLoading ? 0.6 : 1
              }}
            >
              {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </button>
          </form>
        )}

        {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
        {activeTab === 'security' && (
          <form onSubmit={handlePasswordChange}>
            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '8px',
                color: 'var(--text-100)',
                fontSize: '14px',
                fontWeight: '600'
              }}>
                –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={form.current_password}
                onChange={(e) => handleInputChange('current_password', e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid var(--border)',
                  borderRadius: '6px',
                  backgroundColor: 'var(--bg-700)',
                  color: 'var(--text-100)',
                  fontSize: '14px'
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                required
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '8px',
                color: 'var(--text-100)',
                fontSize: '14px',
                fontWeight: '600'
              }}>
                –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={form.new_password}
                onChange={(e) => handleInputChange('new_password', e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid var(--border)',
                  borderRadius: '6px',
                  backgroundColor: 'var(--bg-700)',
                  color: 'var(--text-100)',
                  fontSize: '14px'
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
                required
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{
                display: 'block',
                marginBottom: '8px',
                color: 'var(--text-100)',
                fontSize: '14px',
                fontWeight: '600'
              }}>
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={form.confirm_password}
                onChange={(e) => handleInputChange('confirm_password', e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid var(--border)',
                  borderRadius: '6px',
                  backgroundColor: 'var(--bg-700)',
                  color: 'var(--text-100)',
                  fontSize: '14px'
                }}
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                required
              />
            </div>

            <button
              type="submit"
              disabled={isLoading}
              style={{
                padding: '10px 24px',
                backgroundColor: 'var(--danger)',
                border: 'none',
                borderRadius: '6px',
                color: 'white',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600',
                opacity: isLoading ? 0.6 : 1
              }}
            >
              {isLoading ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...' : '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
            </button>
          </form>
        )}

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        {activeTab === 'notifications' && (
          <div>
            <div style={{
              padding: '20px',
              backgroundColor: 'var(--bg-700)',
              borderRadius: '6px',
              textAlign: 'center'
            }}>
              <div style={{
                fontSize: '48px',
                marginBottom: '16px'
              }}>
                üîî
              </div>
              <h3 style={{
                margin: '0 0 8px 0',
                color: 'var(--text-100)',
                fontSize: '18px'
              }}>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </h3>
              <p style={{
                margin: 0,
                color: 'var(--text-500)',
                fontSize: '14px'
              }}>
                –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
              </p>
            </div>
          </div>
        )}

        {/* –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å */}
        {activeTab === 'privacy' && (
          <div>
            <div style={{
              padding: '20px',
              backgroundColor: 'var(--bg-700)',
              borderRadius: '6px',
              textAlign: 'center'
            }}>
              <div style={{
                fontSize: '48px',
                marginBottom: '16px'
              }}>
                üõ°Ô∏è
              </div>
              <h3 style={{
                margin: '0 0 8px 0',
                color: 'var(--text-100)',
                fontSize: '18px'
              }}>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
              </h3>
              <p style={{
                margin: 0,
                color: 'var(--text-500)',
                fontSize: '14px'
              }}>
                –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
