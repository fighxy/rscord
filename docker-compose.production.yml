version: '3.8'

services:
  # MongoDB - Primary Database
  mongodb:
    image: mongo:7.0
    container_name: rscord-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: CHANGE_THIS_PASSWORD
      MONGO_INITDB_DATABASE: rscord
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - rscord-network
    command: mongod --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: rscord-redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass CHANGE_THIS_PASSWORD
    volumes:
      - redis_data:/data
    networks:
      - rscord-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rscord-rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: CHANGE_THIS_PASSWORD
      RABBITMQ_DEFAULT_VHOST: rscord
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - rscord-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx - Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: rscord-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - rscord-network
    depends_on:
      - mongodb
      - redis
      - rabbitmq

  # Prometheus - Metrics Collection (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rscord-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - rscord-network

  # Grafana - Metrics Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: rscord-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: CHANGE_THIS_PASSWORD
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - rscord-network
    depends_on:
      - prometheus

  # Coturn - TURN/STUN Server for WebRTC
  coturn:
    image: coturn/coturn:latest
    container_name: rscord-coturn
    restart: always
    network_mode: host
    volumes:
      - ./turnserver.conf:/etc/coturn/turnserver.conf:ro
    command: -c /etc/coturn/turnserver.conf

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rscord-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
